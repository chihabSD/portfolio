{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from \"react\";\nconst TabsContext = React.createContext({\n  context: {\n    prevActiveTab: {},\n    activeTab: {}\n  }\n});\n\nclass TabProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      tabs: [],\n      prevActiveTab: {},\n      activeTab: this.props.activeTab\n    });\n\n    _defineProperty(this, \"addTab\", tab => {\n      const isTabExist = this.state.tabs.find(t => tab.id === t.id);\n\n      if (!isTabExist) {\n        this.setState((prevState, props) => {\n          return {\n            tabs: prevState.tabs.concat(tab)\n          };\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeTab\", tabId => {\n      this.setState((prevState, props) => {\n        return {\n          tabs: prevState.tabs.filter(tab => tab.id !== tabId)\n        };\n      });\n    });\n\n    _defineProperty(this, \"onClick\", tab => event => {\n      this.setState((prevState, props) => {\n        return {\n          prevActiveTab: prevState.activeTab,\n          activeTab: tab\n        };\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(TabsContext.Provider, {\n      value: {\n        context: _objectSpread({}, this.state, {\n          addTab: this.addTab,\n          removeTab: this.removeTab,\n          onClick: this.onClick\n        })\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst TabConsumer = TabsContext.Consumer;\nexport { TabProvider, TabsContext, TabConsumer };","map":null,"metadata":{},"sourceType":"module"}